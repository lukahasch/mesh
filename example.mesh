enum Result(O, E):
    Ok(O)
    Err(E)

    fn map(O2)(f: fn(_: O) -> O2) -> Result(O2, E):
        match self with
            Ok(value) => Ok(f(value))
            Err(err) => Err(err)

interface Try(O, E):
    fn op(self) -> Result(O, E)

impl(O, E) Try(O, E) for Result(O, E):
    fn op(self) -> Result(O, E):
        self

enum Poll(Complete):
    Resume
    Complete(Complete)

interface Coroutine(Resume, Complete):
    fn resume(self, resume: Resume) -> Poll(Complete)

interface Future(Complete):
    fn poll(self) -> Poll(Complete)

impl(T) Future(T) for T where T < Coroutine(((), T):
    fn poll(self) -> Poll(T):
        self.resume(())
