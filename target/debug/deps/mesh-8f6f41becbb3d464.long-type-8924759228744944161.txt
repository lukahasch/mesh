nom::Map<(impl Parser<Source<'_>, Output = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {block}, impl Parser<Source<'_>, Output = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#struct}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#enum}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {interface}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {implementation}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#let}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#if}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#while}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#for}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#match}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {function}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {comment}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {list}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {boolean}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {string}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {number}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {assign}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {variable})> as Parser<Source<'_>>>::Output, Error = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#struct}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#enum}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {interface}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {implementation}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#let}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#if}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#while}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#for}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#match}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {function}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {comment}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {list}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {boolean}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {string}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {number}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {assign}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {variable})> as Parser<Source<'_>>>::Error>)> as Parser<Source<'_>>>::Output, Error = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {block}, impl Parser<Source<'_>, Output = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#struct}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#enum}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {interface}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {implementation}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#let}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#if}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#while}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#for}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#match}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {function}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {comment}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {list}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {boolean}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {string}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {number}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {assign}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {variable})> as Parser<Source<'_>>>::Output, Error = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#struct}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#enum}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {interface}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {implementation}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#let}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#if}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#while}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#for}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#match}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {function}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {comment}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {list}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {boolean}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {string}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {number}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {assign}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {variable})> as Parser<Source<'_>>>::Error>)> as Parser<Source<'_>>>::Error>, impl Parser<Source<'_>, Output = <impl Fn(Source<'_>) -> Result<(Source<'_>, Source<'_>), nom::Err<error::Error>> as Parser<Source<'_>>>::Output, Error = <impl Fn(Source<'_>) -> Result<(Source<'_>, Source<'_>), nom::Err<error::Error>> as Parser<Source<'_>>>::Error>, impl Parser<Source<'_>, Output = <for<'a> fn(Source<'a>) -> Result<(Source<'a>, Source<'a>), nom::Err<error::Error>> {identifier} as Parser<Source<'_>>>::Output, Error = <for<'a> fn(Source<'a>) -> Result<(Source<'a>, Source<'a>), nom::Err<error::Error>> {identifier} as Parser<Source<'_>>>::Error>), {closure@src/parser/mod.rs:621:22: 621:48}>
Choice<(nom::Map<(impl Parser<Source<'_>, Output = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {block}, impl Parser<Source<'_>, Output = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#struct}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#enum}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {interface}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {implementation}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#let}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#if}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#while}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#for}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#match}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {function}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {comment}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {list}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {boolean}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {string}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {number}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {assign}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {variable})> as Parser<Source<'_>>>::Output, Error = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#struct}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#enum}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {interface}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {implementation}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#let}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#if}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#while}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#for}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#match}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {function}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {comment}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {list}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {boolean}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {string}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {number}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {assign}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {variable})> as Parser<Source<'_>>>::Error>)> as Parser<Source<'_>>>::Output, Error = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {block}, impl Parser<Source<'_>, Output = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#struct}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#enum}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {interface}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {implementation}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#let}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#if}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#while}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#for}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#match}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {function}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {comment}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {list}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {boolean}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {string}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {number}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {assign}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {variable})> as Parser<Source<'_>>>::Output, Error = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#struct}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#enum}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {interface}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {implementation}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#let}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#if}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#while}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#for}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#match}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {function}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {comment}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {list}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {boolean}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {string}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {number}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {assign}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {variable})> as Parser<Source<'_>>>::Error>)> as Parser<Source<'_>>>::Error>, impl Parser<Source<'_>, Output = <impl Fn(Source<'_>) -> Result<(Source<'_>, Source<'_>), nom::Err<error::Error>> as Parser<Source<'_>>>::Output, Error = <impl Fn(Source<'_>) -> Result<(Source<'_>, Source<'_>), nom::Err<error::Error>> as Parser<Source<'_>>>::Error>, impl Parser<Source<'_>, Output = <for<'a> fn(Source<'a>) -> Result<(Source<'a>, Source<'a>), nom::Err<error::Error>> {identifier} as Parser<Source<'_>>>::Output, Error = <for<'a> fn(Source<'a>) -> Result<(Source<'a>, Source<'a>), nom::Err<error::Error>> {identifier} as Parser<Source<'_>>>::Error>), {closure@src/parser/mod.rs:621:22: 621:48}>, nom::Map<(impl Parser<Source<'_>, Output = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {block}, impl Parser<Source<'_>, Output = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#struct}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#enum}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {interface}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {implementation}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#let}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#if}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#while}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#for}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#match}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {function}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {comment}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {list}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {boolean}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {string}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {number}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {assign}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {variable})> as Parser<Source<'_>>>::Output, Error = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#struct}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#enum}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {interface}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {implementation}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#let}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#if}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#while}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#for}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#match}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {function}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {comment}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {list}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {boolean}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {string}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {number}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {assign}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {variable})> as Parser<Source<'_>>>::Error>)> as Parser<Source<'_>>>::Output, Error = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {block}, impl Parser<Source<'_>, Output = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#struct}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#enum}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {interface}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {implementation}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#let}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#if}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#while}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#for}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#match}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {function}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {comment}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {list}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {boolean}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {string}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {number}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {assign}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {variable})> as Parser<Source<'_>>>::Output, Error = <Choice<(for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#struct}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#enum}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {interface}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {implementation}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#let}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#if}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#while}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#for}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {r#match}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {function}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {comment}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {list}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {boolean}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {string}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {number}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {assign}, for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {variable})> as Parser<Source<'_>>>::Error>)> as Parser<Source<'_>>>::Error>, impl Parser<Source<'_>, Output = <impl Fn(Source<'_>) -> Result<(Source<'_>, Source<'_>), nom::Err<error::Error>> as Parser<Source<'_>>>::Output, Error = <impl Fn(Source<'_>) -> Result<(Source<'_>, Source<'_>), nom::Err<error::Error>> as Parser<Source<'_>>>::Error>, impl Parser<Source<'_>, Output = <impl Parser<Source<'_>, Output = Vec<<for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {expression} as Parser<Source<'_>>>::Output>, Error = error::Error> as Parser<Source<'_>>>::Output, Error = <impl Parser<Source<'_>, Output = Vec<<for<'a> fn(Source<'a>) -> Result<(Source<'a>, Node<'a, ()>), nom::Err<error::Error>> {expression} as Parser<Source<'_>>>::Output>, Error = error::Error> as Parser<Source<'_>>>::Error>, impl Parser<Source<'_>, Output = <impl Fn(Source<'_>) -> Result<(Source<'_>, Source<'_>), nom::Err<error::Error>> as Parser<Source<'_>>>::Output, Error = <impl Fn(Source<'_>) -> Result<(Source<'_>, Source<'_>), nom::Err<error::Error>> as Parser<Source<'_>>>::Error>), {closure@src/parser/mod.rs:628:22: 628:45}>)>
